import { workspace } from "vscode";
import { ConnectionSocket } from "./socket";

interface AuthRequest {
	id: string
}

// Generated by https://quicktype.io

export interface AuthResponse {
	result: AuthResult;
	route:  string;
}

export interface AuthResult {
	token:    string;
	user:     string;
	username: string;
}

// Generated by https://quicktype.io

export interface AuthInfo {
	route:  string;
	token:  string;
	result: AuthResult;
}

export class TokenProvider {
	token: String | undefined = undefined;

	constructor(socket: ConnectionSocket) {
		console.log(workspace.getConfiguration().get("thebot.token-atomic"));
		if (!!workspace.getConfiguration().get("thebot.token") || workspace.getConfiguration().get("thebot.token-atomic")) {
			this.token = !!workspace.getConfiguration().get("thebot.token-atomic") ? workspace.getConfiguration().get("thebot.token-atomic") : workspace.getConfiguration().get("thebot.token");
			socket.token = this.token;
		}
	}

	async new_token(socket: ConnectionSocket, send_message: Function): Promise<String> {
		return new Promise(async (resolve, reject) => {
			if (this.token !== undefined) {
				reject("There is a token already!");
				return;
			}

			var request_id = (await socket.socket_call("auth/request", {})) as AuthRequest;

			send_message("Please send \"#auth " + request_id.id + "\" to TheBot on your preferred platform!");

			const response = await socket.wait_for_message() as AuthResponse;

			this.token = response.result.token;
			socket.token = this.token;

			workspace.getConfiguration().update("thebot.token", this.token);
			resolve(this.token);
		});
	}

	async set_username(socket: ConnectionSocket, name: String): Promise<void> {
		return new Promise((resolve, reject) => {
			if (this.token === undefined) {
				reject("You need a token first!");
				return;
			}

			socket.socket_call("auth/username", {
				username: name
			}).then(_ => resolve());
		});
	}

	async info(socket: ConnectionSocket): Promise<AuthInfo> {
		return new Promise((resolve, reject) => {
			if (this.token === undefined) {
				reject("You need a token first!");
				return;
			}

			socket.socket_call("auth/info", {}).then(info => resolve(info as AuthInfo));
		});
	}

	async login_text(socket: ConnectionSocket): Promise<string> {
		return new Promise(async (resolve, reject) => {
			const info = await this.info(socket);
			resolve(`Logged in as ${info.result.username} (${info.result.user})`);
		});
	
	}
}